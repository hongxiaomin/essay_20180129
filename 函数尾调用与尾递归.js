//尾调用 指某个函数的最后一步调用另一个函数。 尾调用不一定在函数尾部，只要最后一步操作即可
function f(x){
    if(x>0){
        return m(x);
    }
    return n(x);
}
// m、n都是尾调用，它们都是函数f最后一步操作
//函数调用会在内存形成一个“调用记录”，又称“调用帧”（call frame），保存调用位置和内部变量等信息。如果在函数A的内部调用函数B，那么在A的调用记录上方，还会形成一个B的调用记录。等到B运行结束，将结果返回到A，B的调用记录才会消失。如果函数B内部还调用函数C，那就还有一个C的调用记录栈。所有的调用记录，就形成一个“调用栈”(call stack)
//尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用记录，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用记录，取代外层函数的调用记录就可以了。
//尾调用优化：只保留内层函数的调用记录。节省内存。（注意：ES5 中还没有这个优化机制）
//尾调用只在严格模式下生效

//尾递归 指在函数的最后一步调用自己
function tFactorial(n,total){
    if(n===1){
        return total;
    }
    return tFactorial(n-1,n*total);
}
function factorial(n){
    return tFactorial(n,1);
}

console.log(factorial(10));

